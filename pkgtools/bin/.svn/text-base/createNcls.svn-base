#!/usr/bin/env perl
#
# The createNcls utility is used to copy built parcels into NCL directories,
# based on the configuration in the packageMapping.list and nclMapping.list
# files, and is executed for a given architecture/family.
#
# The nclMapping.list file is parsed to get the list of all NCLs that have
# a component for the familt/target being processed. Then, for each NCL, the
# list of parcels that are configured for that NCL are copied into the NCL
# directory.
#
# Creating the tarballs is now done in a separate stage, as NCLs can contain
# parcels from different families/targets.
#

# pkgtoolVersion must be aligned with the other pkgtools
$pkgtoolVersion = "8.0.3";

if ($ENV{ntmkbw_PRODUCTID} eq "Siren")
{
    $pkgtoolDir = "$ENV{TOPDIR}/tools/pkgtools";
}
elsif (defined $ENV{pkgtoolPATH})
{
    $pkgtoolDir = $ENV{pkgtoolPATH};
}
else
{
    $pkgtoolDir = "$ENV{USE_SRC_ROOT}/vobs/lsba_platform_tools/pkgtool";
}

require "$pkgtoolDir/config/pkgutils.pm";
 
chomp ($tmpdir = `mktemp -d -p /tmp createNcls.XXXXXX`);
if (! -d $tmpdir)
{
    die "Unable to create working directory.\n";
}

#
# The "END" is a special sub-routine that allows us to do some special handling
# when the script exits. This is called when either exit or die are called,
# and gives us a single place where we can clean up the temporary directory.
# This is analogous to doing a "trap on exit" in bash.
#
END
{
    my $rc = $?;

    if (-d $tmpdir)
    {
        #print "Cleaning up working directory: $tmpdir.\n";
        `rm -rf $tmpdir`;
    }

    $? = $rc;
}

# Catch interrupts.
# This will result in "die" being called, which in turn will call "END" above.
use sigtrap qw(die normal-signals);

#
# Declare globals
#


$helpMessage = 
"$0 (version $pkgtoolVersion)

Script to create the NCLs based on order codes (OC)
  Options:
    -f <family> - family for which we create the NCLs
    -t <target> - target for which we create the NCLs
    -i <dir> - input dir, ewhere the parcels are created already
    -o <dir> - output dir, where to place the pakages: 
                 <dir>/<orderCode>/packages/<package>\n";

$fakeRoot = "/opt/vulcan/RHE-3/fakeroot/1.2.3/bin/fakeroot";

use Getopt::Std;
                                                                                                           
my %opts = ();
if (!getopts('f:t:hi:o:', \%opts)  || $opts{h}) {
  print $helpMessage;
}

print "\nUsing createNcls version $pkgtoolVersion.\n\n";

#
# Initializations
#
@orderCodes = ();
%packageOrderCodes = ();

$family = $opts{f};
$target = $opts{t};

if ($target eq "fam")
{
    $target = "*";
}

#
# Validations
#
if (!$family)
{
    die "ERROR: You must specify -f <family>\n";
}

if (!$target)
{
    die "ERROR: You must specify -t <target>\n";
}

if ($opts{i}) {
  die "ERROR: Cannot find $opts{i}: $!\n" if ! -d $opts{i};
}
else {
  die "ERROR: You must provide a -i <intdir> option\n";
}
if (! $opts{o}) {
  die "ERROR: You must provide a -o <outdir> option\n";
}

#
# Read the configuration files
# 

$pkgmapFile = $ENV{USE_PKGMAPFILE};
$nclmapFile = $ENV{USE_NCLMAPFILE};

%pkgmap = ();
%nclmap = ();
%ncls = ();

if (parseNclMapping($nclmapFile, \%nclmap) != 0)
{
    die "Failed to parse $nclmapFile";
}

if (parsePkgMapping($family, $pkgmapFile, \%pkgmap) != 0)
{
    die "Failed to parse $pkgmapFile";
}

#
# Get the complete list of NCLs for this family/target.
#
print "Checking for $family / $target\n";

my @targetList = ("*"); # Always get the family
push @targetList, $target if ($target ne "*");

for my $ncltarget (@targetList)
{
    for my $role (keys %{$nclmap{$family}{$ncltarget}})
    {
        map ($ncls{$_}++, @{$nclmap{$family}{$ncltarget}{$role}});
    }
}

my $tarFilesDir = "$opts{o}/tarfiles";
my $command = qq(mkdir -p $tarFilesDir);
system ($command) and die qq(ERROR: In command: $command: $!);

#
# Now we have to look for all the packages
# in the input directory, issue warnings if we don't find them
# and if we find them, create the order code dir and the package symlinks 
#

print "Creating order code ncl directories...\n";
for my $ncl (sort keys %ncls)
{
    print "Code: $ncl\n";

    my $pkgsInDir;

    if ($ENV{ntmkbw_PRODUCTID} eq "Siren")
    {
        $pkgsInDir = "$opts{i}/packages";
    }
    else
    {
        $pkgsInDir = "$opts{i}";
    }

    print "**** pkgsInDir = $pkgsInDir";

    my $outDir = "$opts{o}/$ncl/NCL/$ncl";
    my $command = "mkdir -p $outDir/packages";
    system ($command) and die "ERROR: In command: $command: $!";

    #
    # Now get the list of packages for the order code we care about.
    # Note, we're passing in "undef" for the layer, since we want all layers.
    #
    @pkglist = ();
    getNclPkgs(\@pkglist, \%pkgmap, \%nclmap, $ncl, undef, $family, $target);

    my @missingPkgs = ();

    for my $pkg (@pkglist)
    {
        my $command = "cp -f $pkgsInDir/$pkg-* $outDir/packages/";
        if (system ($command) != 0)
        {
            warn "ERROR: In command: $command: $!";
            push @missingPkgs, $pkg;
        }
    }

    if (scalar @missingPkgs != 0)
    {
        print "\nFailed to find the following packages:\n";
        for my $p (@missingPkgs)
        {
            print "\t$p\n";
        }
        die "\nError: Failed to find all necessary packages\n";
    }

   # if ($ENV{ntmkbw_PRODUCTID} eq "Siren")
   # {
   #     my $command = "cp -rf $opts{i}/sbin $outDir";
   #     system ($command) and die "ERROR: In command: $command: $!";
   # }
}
print "\nDone.\n";
print "\nNCLs creation successful.\n\n";

