#!/usr/bin/perl
############################################################################
# getPatches4Cust1
#
#   - tool to get patches for input custom1 field of CRs
#     1) It first gets CRs based on input custom1 field,
#        for example, VSE04BL4. 
#     2) Next, retrieve patch list,componentid for resulting CRs.
#
# Written  by: Jason Guyea - Sep 23, 2007
# Modified by: Juan Zhang  - Apr 23, 2008
# Modified by: Madhu R     - Feb 01, 2010
#
############################################################################

use Getopt::Long;

#
# Declare globals
#

# Command line arguments
use vars qw (
        $custom1
        $patchListFile
);

# Constants (and semi-constants...)
use vars qw (
        $RPSGET
        $GENXML
        $GETCRANDPATCHES
);

# Globals
use vars qw (
        $pswd
        $gid
        $uid
        @crs
        @GENPatches
);

# Initialize constants and some globals
$GETCRS = '/vob/siren/tools/pkgtools/utils/getCR4Cust1';
$NEU    = '/opt/corp/projects/cmtools/siren_NEU/bin/neu'; 
$RPSGET = '/vob/siren/tools/pkgtools/utils/rpsGetPatches';

# Display the help message
sub showHelp
{
    print STDERR <<OUT;
    $0

    Arguments:
    --custom1       <Custom1 Field Text> : custom1 field for CRs, eg. VSE04BL4
    --patchListFile <OutputFile Name>    : output file containing patch list:componentid,<componentid2>...
    [ --EMGPatch <yes|no> ]              : (optional) will look for EMG patch in addition to GEN patch if yes (default is no)
    [ --patchStatus <S1>[,S2,S3] ]       : (optional) valid values are R,V,S or none: By default only R status patches are looked at
    [ --productLine <prod> ]             : (optional) default is NPM 
    --help                               : provides usage information
OUT
    exit 1;
}

#Function to remote whitespaces
sub trim($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}

# Get all patches where category = input for a list of CRs
# Parameters:
#    category: eg. GEN/OBS/EMG
# Return:
#    array of patches
sub getPatchBasedOnCategory
{
 my $category = shift;
 my @patches;
 my ($crlist, %pars);

 my $patchStatus="status=";
 if ($patStatus) {
    @tarr=split(",",$patStatus);
    foreach (@tarr) {
      if (($_ ne "R") && ($_ ne "V") && ($_ ne "S") && ($_ ne "none")) {
         print ("WARNING: Ignoring value $_ in patchStatus \n");
      }
      else {
        if ($_ eq "none") {
          $patchStatus = "";
        }
        else {
          $patchStatus .= $_ . ","; 
        }
      }
    }
    $patchStatus =~ s/,$//g; #remove trailing comma
 }
 else {
   $patchStatus .= "R";
 }

 my $pLine="product_line=";
 if ($prodLine) {
   $pLine .= $prodLine; 
 }
 else {
   $pLine .= "NPM";
 }

 for (my $i=0; $i <= $#crs; $i++) {
     if (!$crlist) {
         $crlist = $crs[$i];
     } else {
         $crlist .= ','.$crs[$i];
     }

     # Only query on 8 crs at a time
     my $NEU_CMD="";
     if (($i >= 8) && ($i % 8 == 0)) {
         print ("Getting patches with $patchStatus , for CRs: $crlist \n");
         $NEU_CMD="$NEU patch search $pLine category=$category $patchStatus cr=$crlist -fields software_id,product_component";
         $pars{$_} = 1 foreach (`$NEU_CMD`);
         $crlist = undef;
     }
 }

 if($crlist) {
   print ("Getting patches with $patchStatus , for CRs: $crlist \n");
   $NEU_CMD="$NEU patch search $pLine category=$category $patchStatus cr=$crlist -fields software_id,product_component";
   $pars{$_} = 1 foreach (`$NEU_CMD`);
 }

 foreach (sort keys %pars) 
 {
     chomp;
     if($_)
     {
         push(@patches, $_);
     }
 }

 return (@patches);
} #end of sub getPatchBasedOnCategory

# Get userid and password.
# Parameters: NULL
# Return: gid, pwd
sub login
{
    chomp($uid = `whoami`);
    chomp($gid = `ypcat -k passwd | grep $uid | cut -f5 -d: |cut -f2 -d,`);
    print STDERR "Password for [$gid]:";
    system "stty -echo";
    chomp($pswd = <STDIN>);
    system "stty echo";
    print STDERR "\n";
}

#
# MAIN
#

# Get the command-line arguments
my $rc = GetOptions(
     'custom1=s'                  => \$custom1Field,
     'patchListFile=s'            => \$patchListFile,
     'EMGPatch=s'                 => \$EMGPatch, 
     'patchStatus=s'              => \$patStatus,
     'productLine=s'              => \$prodLine,
     'help'                       => \$help);

if (!$rc || defined($help))
{
    &showHelp;
}

if ((! $custom1Field) || (!$patchListFile) ) {
  &showHelp;
}

 die "The output patchlist file $patchListFile already exists.\n"
     if (-r $patchListFile);

# Get user id and password 
login();

# Get CRs of which custom1 field, print CRs to screen
my @CRLIST = `$GETCRS $custom1Field $gid $pswd 2>/dev/null`;
my $rc = $?;
die "Failed to run $GETCRS: rc = $rc" if ($rc != 0);

my $ind=0;
my @goodArr=();
foreach (@CRLIST)
{
  $CRLIST[$ind] = trim($CRLIST[$ind]);
  if (($CRLIST[$ind] ne "") && ($CRLIST[$ind] =~ /^Q/)) {
    push(@goodArr, $CRLIST[$ind]);
  }
  $ind++;
}
undef @CRLIST;
@crs = sort @goodArr;
print "\n---------------CRs with 'Custom 1' IN ($custom1Field)------------------\n";
print "\nTotal: ", scalar @crs, " crs\n";
# Get GEN patches for CRs and EMG patches if specified
my $categList = "GEN";
if (($EMGPatch) && ($EMGPatch eq "yes") ) {
  $categList .= ",EMG";
}

@GENPatches = getPatchBasedOnCategory($categList);

print "\n-------------------Retrieved GEN Patches---------------------------\n";
print "Patch,ComponentID is:***$_***\n" foreach (@GENPatches);
print "\nTotal: ", scalar @GENPatches, " entries of patch,componentID\n";

# Write patch list to patchListFile
open (MYFILE, "> $patchListFile");
print MYFILE "$_\n" foreach (@GENPatches);
close (MYFILE);

