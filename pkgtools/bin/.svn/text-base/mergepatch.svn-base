#!/bin/bash

# This script will rollup specified pre-built parcels into a single patch

set -o nounset # Causes script to exit if unintialized variables are used

#
# printUsage:
#
#    Print the usage statement.
#
function printUsage()
{
    cat >&2 <<END

Usage: $0
    -p <patchId> [ -l ] [ -f <parcellist> ] [ -a <admin> ] [ -o <outdir> ] ...

Arguments:
    -p <patchId>    : Mandatory argument providing the patch identifier.
    -f <parcellist> : Optional argument specifying a file with the list of
                      parcel files to be built into the patch.
    -a <admindata>  : Optional argument specifying the admindata file. If not
                      specified, a default file will be generated.
    -o <output dir> : Optional argument specifying the output directory. If
                      not specified, the generated patch will be written to the
                      current directory.
    -l              : Optional argument, indicating labPatch should be Y.

    In addition to the -f option, parcels can be specified on the command line.

Version: $pkgtoolVersion

END

    exit 1
}

#
# checkRc:
#
#    Checks the return status of the last command. If non-zero, aborts with msg.
#
function checkRc()
{
    local rc=$?
    local msg=$1

    if [ $rc -ne 0 ]
    then
        echo "$msg" >&2

        # This is not pretty. If we're in a subshell, exiting will only exit
        # the subshell. Instead, we'll send a signal to the process.
        if [ $BASH_SUBSHELL -ge 1 ]
        then
            kill -USR2 $$
        fi

        exit $rc
    fi
}

#
# errorFromSubshell:
#
#    Signal handler for USR2, sent from checkRc to indicate an error in
#    a subshell.
#
function errorFromSubshell()
{
    echo "Received error indication (USR2) from sub-shell. Exiting..." >&2
    exit 1
}

trap errorFromSubshell USR2

#
# Global variables and constants
#

#
# There may be cases where USE_SRC_ROOT is undefined, and we don't want this
# to cause a failure. Bash provides syntax to provide an alternative if
# a variable is undefined, which is nice when the "nounset" option is used.
# In this case, ${USE_SRC_ROOT-""} is saying "Use an empty string if
# $USE_SRC_ROOT is undefined."
#
declare SRC_ROOT=${USE_SRC_ROOT-""}
declare XML_VALIDATOR
if [ -z "${XML_VALIDATOR_PATH-}" ]
then
    XML_VALIDATOR="${SRC_ROOT}/vobs/lsba_platform_tools/xml_validator/bin/validateXml"
else
    XML_VALIDATOR="${XML_VALIDATOR_PATH}/bin/validateXml"
fi

# This version should stay aligned with that of pkgtool
# The schema is stored in the pkgtools' config directory. If the tool is
# being accessed from lsba_platform_tools, we need to chop off the bin dir.
#
declare CFGDIR=`dirname $0 | sed -r 's/(\/bin)?$/\/config/'`
declare SCHEMA="$CFGDIR/vsePatchAdmin.xsd"

# pkgtoolVersion must be aligned with the other pkgtools
declare pkgtoolVersion="8.0.3"

declare TMP=`mktemp -d -p /tmp mergepatch.XXXXXX`
if [ ! -d $TMP ]
then
    echo "Unable to create temporary directory" >&2
    exit 1
fi

declare PATCHID=
declare OUTDIR=.    # By default, put patch file in the current directory

# The following array (and counter) is used to store the list of parcels
declare -a PARCELLIST
declare -i PARCELLISTsize=0
declare -i numBaselineParcels=0 # Counter for baseline parcel files

declare PARCELLISTFILE=
declare ADMINDATAFILE=

declare -i invalidCount=0 # Counter for invalid parcel files

declare -i BUILT_FROM_BUILDPATCH=0

declare labPatch="N"

#
# cleanup:
#
#    The following function is called on exit, to cleanup the temporary dir
#
function cleanup()
{
    if [[ -n $TMP ]]
    then
        cd / && test -d $TMP && rm -rf $TMP
    fi
}

trap cleanup EXIT

#
# validateParcel:
#
#    Validate the parcel filename. If ok, adds it to the list. Otherwise,
#    spits out a warning and increments the invalid parcel counter
#
function validateParcel()
{
    local parcel=$1

    if [[ -f "$parcel" ]]
    then
        echo $parcel | grep -q '\.parcel$'
        if [[ $? -eq 0 ]]
        then
            PARCELLIST[$PARCELLISTsize]=$parcel
            let PARCELLISTsize++
        else
            echo "Not a parcel: $parcel" >&2
            let invalidCount++
        fi

        #
        # Count the number of baseline parcels
        #
        getType $parcel | grep -q 'parcel_baseline'
        if [[ $? -eq 0 ]]
        then
            let numBaselineParcels++
        fi

    else
        echo "Does not exist: $parcel" >&2
        let invalidCount++
    fi
}

#
# showParcelAdmindata:
#    Displays the admindata file from the specified parcel
#
function showParcelAdmindata()
{
    local parcel=$1 

    if [ ! -r "$parcel" ]
    then
        echo "Cannot read parcel: $parcel" >&2
        return 1
    fi
    
    local fname=`basename $parcel`
    local box=${fname/%\.parcel/.box}

    tar xzf $parcel -O $box | tar xz -O admindata
    checkRc "Failed to extract admindata from parcel: $parcel"
}

#
# getProductComponent:
#    Displays the product component for the specified parcel
#
function getProductComponent()
{
    local parcel=$1

    showParcelAdmindata $parcel | \
        grep "<product_component>" | \
        sed "s/.*<product_component>\(.*\)<\/product_component>.*/\1/"
}

#
# getType:
#    Displays the product type for the specified parcel
#
function getType()
{
    local parcel=$1

    showParcelAdmindata $parcel | \
        grep "<type>" | \
        sed "s/.*<type>\(.*\)<\/type>.*/\1/"
}

#
# genAdmindata:
#
#    This function is called to generate a default admindata file, and is
#    intended for design test purposes only. For real patches, built from
#    buildpatch, an admindata file will be specified at the command line.
#
function genAdmindata()
{
    # Contents TBD
    local type="rpm_patch"

    if [[ $numBaselineParcels -gt 0 && \
          $PARCELLISTsize -gt 1 ]]
    then
        echo "Baseline parcel cannot mix with other baseline or regular parcels. Aborting..." >&2
        exit 1
    else
        if [[ $numBaselineParcels -eq 1 ]] 
        then
            type="baseline_patch"
        fi
    fi

    cat <<EOF
<admindata>
    <metaversion>1.1</metaversion>
    <payload>
        <patch_id>${PATCHID}</patch_id>
        <title>${PATCHID}</title>
        <description>Built by `whoami`</description>
        <created>`date +"%Y-%m-%d %H:%M:%S"`</created>
        <baseline_release>$ntmkbw_VSE_RELEASE</baseline_release>
        <labPatch>$labPatch</labPatch>
        <apply_handling>active</apply_handling>
        <category>DBG</category>
        <class>corrective</class>
        <status>O</status>
        <type>$type</type>
        <reboot_required>N</reboot_required>
        <cr>NONE</cr>
EOF

    echo "<product_components>";
    for (( i=0 ; i < $PARCELLISTsize ; i++ ))
    do
        getProductComponent ${PARCELLIST[$i]}
    done | sort -u
    echo "</product_components>";

    cat <<EOF
    </payload>
</admindata>
EOF
}


#
# validateAdmindata:
#
#    Validates the admindata file against the schema, exiting the tool if
#    the file is invalid.
#
function validateAdmindata()
{
    local xmlfile=$1
    local patchType=""

    #
    # Validate the XML
    #
    local xmlValidateOut=
    xmlValidateOut=`$XML_VALIDATOR $xmlfile $SCHEMA 2>&1`

    if [ $? -ne 0 ]
    then
        echo "$xmlValidateOut" >&2

        echo "Validation of admindata XML failed. Aborting..." >&2

        exit 1
    fi

    #
    # Make sure the patch type is correct
    #
    if [[ $numBaselineParcels -gt 0 && $PARCELLISTsize -gt 1 ]]
    then
        echo "Baseline parcel can not mix with other baseline or regular parcels. Aborting..." >&2

        exit 1
    else
        patchType=`grep "<type>" $xmlfile | \
                   sed "s/.*<type>\(.*\)<\/type>.*/\1/"`

        if [[ $numBaselineParcels -eq 1 ]] 
        then
            if [[ $patchType != "baseline_patch" ]]
            then
                echo "Validation of admindata XML failed. Patch type must be baseline_patch for baseline patch. Aborting." >&2
                exit 1
            fi
        else
            if [ $patchType = "baseline_patch" ]
            then
                echo "Validation of admindata XML failed. baseline_patch must have 1 baseline parcel - found $numBaselineParcels. Aborting." >&2
                exit 1
            fi
        fi
    fi 
}


#
# Process the command-line arguments
#
while getopts bp:f:a:o:lh option
do
    case "$option" in
        b)
            BUILT_FROM_BUILDPATCH=1
            ;;
        p)
            PATCHID=$OPTARG
            ;;
        f)
            PARCELLISTFILE=$OPTARG
            ;;
        a)
            ADMINDATAFILE=$OPTARG
            ;;
        o)
            OUTDIR=$OPTARG
            ;;
        l)
            labPatch="Y"
            ;;
        h)
            printUsage
            exit 1
            ;;
    esac
done

# Discard the processed arguments. What's left should be the list of parcels.
for (( i=1 ; i < $OPTIND ; i++ ))
do
    shift
done

#
# Validate the arguments
#
if [[ -z $PATCHID ]]
then
    echo "The patch name (-p) is a required option. Aborting..." >&2
    exit 1
fi

if [[ ! -d $OUTDIR ]]
then
    mkdir -p $OUTDIR
    checkRc "Failed to create output directory: $OUTDIR"
fi

#
# Get the list of parcels specified at the command-line, if any.
for parcel in $*
do
    validateParcel "$parcel"
done

#
# Read the parcels from a file
#
if [[ -n $PARCELLISTFILE ]]
then
    if [[ ! -f $PARCELLISTFILE ]]
    then
        echo "Specified parcel list file does not exist: $PARCELLISTFILE" >&2
        exit 1
    fi

    declare parcels=`cat $PARCELLISTFILE`
    for parcel in $parcels
    do
        validateParcel "$parcel"
    done
fi

if [[ $invalidCount -ne 0 ]]
then
    echo "One or more invalid parcel files were specified. Aborting..." >&2
    exit 1
fi

if [[ $numBaselineParcels -gt 0 && \
      $PARCELLISTsize -gt 1 ]]
then
    echo "Baseline parcel can not mix with other baseline or regular parcels. Aborting..." >&2
    exit 1
fi

echo "Parcels to be included:"
for (( i=0 ; i < $PARCELLISTsize ; i++ ))
do
    echo -e "\t${PARCELLIST[$i]}"
done

if [[ ! -f $SCHEMA ]]
then
    echo "Unable to find schema file: $schema" >&2
    exit 1
fi
 
#
# Validate the admindata file, generating it if necessary
#   
if [[ -n $ADMINDATAFILE ]]
then
    if [[ ! -f $ADMINDATAFILE ]]
    then
        echo "Specified admindata file does not exist" >&2
        exit 1
    fi

    cp $ADMINDATAFILE ${TMP}/admindata
    checkRc "Failed to run: cp $ADMINDATAFILE ${TMP}/admindata"

    ADMINDATAFILE="${TMP}/admindata"
else
    ADMINDATAFILE="${TMP}/admindata"
    genAdmindata > $ADMINDATAFILE
    checkRc "Failed to write admindata to: $ADMINDATAFILE"
fi

validateAdmindata $ADMINDATAFILE

#
# Now we can build the patch
#

#
# First, we create the wrapper tarball, which contains the admindata file
# and the set of parcels.
#
tar cf ${TMP}/${PATCHID}.wrapper -C `dirname $ADMINDATAFILE` admindata
checkRc "Command failed: tar cf ${TMP}/${PATCHID}.wrapper -C `dirname $ADMINDATAFILE` admindata"

for (( i=0 ; i < $PARCELLISTsize ; i++ ))
do
    tar rf ${TMP}/${PATCHID}.wrapper \
        -C `dirname ${PARCELLIST[$i]}` \
        `basename ${PARCELLIST[$i]}`
    checkRc "Command failed: tar rf ${TMP}/${PATCHID}.wrapper -C `dirname ${PARCELLIST[$i]}` `basename ${PARCELLIST[$i]}`"
done

#
# Generate the checksum for the wrapper tarball
#
declare wd=$PWD
cd $TMP
cksum ${PATCHID}.wrapper > ${PATCHID}.wrapper.cksum
checkRc "Command failed: cksum ${PATCHID}.wrapper > ${PATCHID}.wrapper.cksum"
cd $wd

# The signature and certificate files are empty for now
echo -n > ${TMP}/${PATCHID}.sig
checkRc "Command failed: echo -n > ${TMP}/${PATCHID}.sig"
echo -n > ${TMP}/certificate
checkRc "Command failed: echo -n > ${TMP}/certificate"

#
# We've built the contents of the patch, now we can tar them all
#
tar cf ${OUTDIR}/${PATCHID}.patch -C $TMP \
    certificate \
    ${PATCHID}.sig \
    ${PATCHID}.wrapper.cksum \
    ${PATCHID}.wrapper

checkRc "An error occurred while generating the patch file."

echo "The patch was successfully generated. Output is:"
echo "${OUTDIR}/${PATCHID}.patch"


