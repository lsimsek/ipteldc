#!/usr/bin/perl

############################################################################
# rpsGetPatches
#
#   - tool for downloading a specified list of patches
#
# Usage:
#     rpsGetPatches -p patchList -o outDir
#
# Written  by: Jason Guyea - Sep 23, 2007
# Modified by: Juan Zhang  - Apr 23, 2008
#
############################################################################

use Net::FTP;
use Getopt::Long;

#
# Declare globals
#

# Command line arguments
use vars qw (
    $patchListFile
    $outDir
    $help
);


# Constants (and semi-constants...)
use vars qw (
    $NEU
);

# Globals
use vars qw (
    $debug
    @allpatches
    $count
    $NEUQUERY
    @realPatchNames
    $par
    $parfound
    $rpsHost 
    $dir    
    $username
    $password
    $PROGRAM_NAME
);

# Initialize constants and some globals
$NEU          = '/opt/corp/projects/cmtools/siren_NEU/bin/neu';
die ("neu not found at $NEU") if (!-x $NEU);
$NEUQUERY     = $NEU.' patch search product_line=NPM -fields software_id category=gen,emg status=r,v,s';
$rpsHost      = (defined $ENV{RPS_HOST} && $ENV{RPS_HOST} ne "") 
              ? $ENV{RPS_HOST} 
              : 'rps.ca.nortel.com';
$dir          = '/NPM';
$username     = 'gsduser';
$password     = 'Gsd!4alp';
$PROGRAM_NAME = $0;

#
# showHelp:
#
#    Display the help message
#
sub showHelp
{
    print STDERR <<OUT;
    $PROGRAM_NAME

    Arguments:
    --patchListFile <InFile Name>      : file containing patch list
    --outDir        <Output Dir Name>  : output directory of downloaded patches
OUT
    exit 1;
}

# get_patch_list_from_RPS:
#
#    Return a list containing all parcel and patch names from /NPM on RPS server.
#
# Parameters:
#    NULL
#
# Return:
#    @files, parcel and patch list 
#
sub get_patch_list_from_RPS()
{  
    my @files    = ();

    if (my $ftp = Net::FTP->new("$rpsHost")) {  
        $ftp->debug($debug);
        if ($ftp->login($username,$password)) {
            if ($ftp->cwd ("$dir")) {
                @files = $ftp->dir;
            } else { 
                print "Cant cd $dir"; 
            }
        } else { 
            print "Login credentials failed - $username,$password";              
        }
        $ftp->quit();
    } else {
        print "FTP failed init... bad host? $rpsHost"; 
    }

    foreach my $par ( @files ) {
        $par =~ s/^.* ([0-9A-Z_\-\.\+]+(parcel|patch))$/$1/i;
    }
    return @files;
}

#
# get_patches_from_RPS:
#
#    This subroutine download patches from rps repository
#    to output directory.
#
# Parameters:
#    @, patch list
#
# Return:
#    success, return 1 upon success, else failure
#
sub get_patches_from_RPS(@)
{  
    my @patches = @_;

    my $success  = 1;
    my $gotten = 0;

    if ($#patches != -1) 
    {
        #  print "   - Downloading patches from $rpsHost\n";
        if (my $ftp = Net::FTP->new("$rpsHost")) {  
            $ftp->debug($debug);
            if ($ftp->login($username,$password)) {
                if ($ftp->cwd ("$dir")) {
                    if ($ftp->binary) {

                        foreach my $file (@patches)
                        {     
                            if ( my $filename = $ftp->get("$file", "$outDir/$file")) { 
                                print "  Downloaded: $filename\n";
                                $gotten++;
                            } else {
                                $success .= " File Not Found: $file\n";
                            }
                        }

                    } else { 
                        $success = "Cant set binary transfer mode"; 
                    }
                } else { 
                    $success = "Cant cd $dir"; 
                }
            } else { 
                $success = "Login credentials failed - $username,$password";              
            }
            $ftp->quit();
        } else { 
            $success = "FTP failed init... bad host? $rpsHost"; 
        }
    } 

    print "\n  Downloaded Total: $gotten patches \n";
    $success =~ s/1(.+)/$1/ ;
    return  $success;   # returns either 1 for good or string of errormsgs.
}

#
# MAIN
#

# Check whether there debug flag is specified
if (grep(/^debug$/,@ARGV)) {
    $debug = 1 ;
    @ARGV = grep(!/^debug$/,@ARGV);
}

# Get the command-line arguments
my $rc = GetOptions(
    'patchListFile=s'                  => \$patchListFile,
    'outDir=s'                         => \$outDir,
    'help'                             => \$help);

if (!$rc || defined($help))
{
    &showHelp;
}

die "The patch list file must be specified with --patchListFile.\n"
if (! $patchListFile);

die "The output directory must be specified with --outDir.\n"
if (! $outDir);

if (-r $patchListFile) 
{
    # user supplied a file w/ list of patches
    open IN, "<$patchListFile" or die;
    chomp(@allpatches = <IN>);
    close IN;
} else {
    die "\n\n $patchListFile is not readable\n\n";
}

die "The output directory is not readable: $outDir. " if (!-r $outDir);

# Get parcel and patch list from RPS
print " * Converting patch names to RPS friendly case.\n";
@realPatchNames = get_patch_list_from_RPS();

# Check whether parcels and patches to be downloaded are found in RPS
foreach $par (@allpatches) { 
    foreach (@realPatchNames) {
        if (/^\Q$par\E(\.patch|\.parcel)?$/i) {
            my $type = $1;
            $parfound=1;
            $par = $_;
            last;
        }
    }
    die " Patch not found: $par\n" if (!$parfound);
}

# Download parcels or patches
print " * Connecting to RPS to download the patches into the current directory:\n";

my $gotRPSFiles = get_patches_from_RPS(@allpatches);

if ($gotRPSFiles == 1) {
    print "\nSuccessed downloading patches.\n\n"
} else {
    print "\n$gotRPSFiles\n\n";
}

