#!/usr/bin/perl
#
# This tool is used for updating admindata in a patch
#

use strict;

# XML Parsing module
use XML::DOM;
use File::Basename;

use Getopt::Long;

#
# Declare globals
#

# Command line arguments
use vars qw (
    $patch
    $newAdmindata
    $status
    $category
    $outputDir
    $help
);

use vars qw (
    $pkgtoolBinDir
    $pkgtoolConfigDir
    $tmpdir
    $rebootAllBlades
    $rebootCriteriaDefined

    %pcrProductComponent
    %bladeRebootCriteria
    %appSgRebootCriteria
    %admindata
);

# Initialize constants and some globals
$outputDir = ".";

# Determine the config dir
$pkgtoolBinDir = dirname($0);
if (-d "$pkgtoolBinDir/config")
{
    $pkgtoolConfigDir = "$pkgtoolBinDir/config";
}
else
{
    $pkgtoolConfigDir = "$pkgtoolBinDir/../config";
}
require "$pkgtoolConfigDir/pkgutils.pm";


chomp ($tmpdir = `mktemp -d -p /tmp updatepatch.XXXXXX`);
if (! -d $tmpdir)
{
    die "Unable to create working directory.\n";
}

#
# The "END" is a special sub-routine that allows us to do some special handling
# when the script exits. This is called when either exit or die are called,
# and gives us a single place where we can clean up the temporary directory.
# This is analogous to doing a "trap on exit" in bash.
#
END
{
    my $rc = $?;

    if (-d $tmpdir)
    {
#        print "Cleaning up working directory: $tmpdir.\n";
        `rm -rf $tmpdir`;
    }

    $? = $rc;
}

# Catch interrupts to ensure the tmpdir is cleaned.
# This will result in "die" being called, which in turn will call "END" above.
use sigtrap qw(die normal-signals);



sub showHelp
{
    print STDERR <<OUT;
$0

Arguments:
    --patch <patch file>
    --admindata <admin segment>
    --status <new status>
    --category <new category>
    --output <output directory>

Notes:
    The --admindata and --status/category options are mutually exclusive.
    The file provided by the admindata option should contain only those
    tags being updated, ie. just a snippet of an admindata file.

Example:
    updatepatch -p mypatch.patch -s V -o out

OUT
    exit 1;
}

#
# parseCriteriaList:
#
#    Parse reboot_criteria_list element from the parsed XML
#
sub parseCriteriaList
{
    my $criteriaList = shift;

    my $criteria = $criteriaList->item(0)->getElementsByTagName("reboot_criteria");
    my $numCriteria = $criteria->getLength;

    #
    # Parse the individual REBOOT_CRITERIA elements
    #
    for (my $i = 0; $i < $numCriteria; $i++)
    {
        my $criterion = $criteria->item($i);
        parseCriteria($criterion);
    }
}

#
# parseCriteria:
#
#    Parse an individual reboot_criteria element from the parsed XML
#
sub parseCriteria
{
    my $data = shift;

    for my $node ($data->getChildNodes)
    {
        if (($node->getNodeType == ELEMENT_NODE) && ($node->hasChildNodes))
        {
            if ($node->getNodeName eq "all_blades")
            {
                for my $child ($node->getChildNodes)
                {
                    if ($child->getNodeType == TEXT_NODE)
                    {
                        if ($child->getNodeValue eq "Y")
                        {
                            $rebootAllBlades = "Y";
                        }
                    }
                }
            }
            elsif ($node->getNodeName eq "app_service_group")
            {
                for my $child ($node->getChildNodes)
                {
                    if ($child->getNodeType == TEXT_NODE)
                    {
                        $appSgRebootCriteria{$child->getNodeValue}++;
                    }
                }
            }
            elsif ($node->getNodeName eq "blade_criteria")
            {
                if (! $node->hasChildNodes)
                {
                    die "BLADE_CRITERIA specified in input XML without sub-fields";
                }

                my $family = "*";
                my $target = "*";
                my $role   = "*";

                for my $bladeCriteria ($node->getChildNodes)
                {
                    for my $child ($bladeCriteria->getChildNodes)
                    {
                        if ($child->getNodeType == TEXT_NODE)
                        {
                            if ($bladeCriteria->getNodeName eq "family")
                            {
                                $family = $child->getNodeValue;
                            }
                            elsif ($bladeCriteria->getNodeName eq "target")
                            {
                                $target = $child->getNodeValue;
                            }
                            elsif ($bladeCriteria->getNodeName eq "role")
                            {
                                $role = $child->getNodeValue;
                            }
                        }
                    }
                }

                $bladeRebootCriteria{"$family:$target:$role"}++;
            }
        }
    }
}

#
#
# parseProductComponentRequiresList:
#
#    Parse product_component_requires_list element from the parsed XML
#
sub parseProductComponentRequiresList
{
    my $componentList = shift;

    my $productComponentRequires = $componentList->item(0)->getElementsByTagName("product_component_requires");
    my $numPCR = $productComponentRequires->getLength;

    #
    # Parse the individual product_component_requires elements
    #
    for (my $i = 0; $i < $numPCR; $i++)
    {
        my $pcr = $productComponentRequires->item($i);
        parseProductComponentRequire($pcr);
    }
}

#
# parseProductComponentRequire:
#
#    Parse an individual product_component_requires element from the parsed XML
#
sub parseProductComponentRequire
{
    my $data = shift;
    my %pcrRequiresValue=();
    my $pcrProductComponentValue;
    my $pcrRequiresValues;

    for my $node ($data->getChildNodes)
    {
        if (($node->getNodeType == ELEMENT_NODE) && ($node->hasChildNodes))
        {
            if ($node->getNodeName eq "pcr_product_component")
            {
                for my $child ($node->getChildNodes)
                {
                    if ($child->getNodeType == TEXT_NODE)
                    {
                        $pcrProductComponentValue=$child->getNodeValue;
                    }
                }
            }
            elsif ($node->getNodeName eq "pcr_requires")
            {
                for my $child ($node->getChildNodes)
                {
                    if ($child->getNodeType == TEXT_NODE)
                    {
                        $pcrRequiresValues=$child->getNodeValue;
                        for my $req (split /\s+/, $pcrRequiresValues)
                        {
                            $pcrRequiresValue{$req}++ if ($req ne "");
                        }
                    }
                }
            }
        }
    }

    for my $v (sort keys %pcrRequiresValue)
    {
        $pcrProductComponent{$pcrProductComponentValue}{$v}++;
    }
}

#
# parseAdmindata:
#
#    Parse the admindata file extracted from the patch
#
sub parseAdmindata
{
    my $parser = new XML::DOM::Parser;
    my $doc = $parser->parsefile("$tmpdir/admindata");

    my $payload = $doc->getElementsByTagName("payload");
    my $data = $payload->item(0);

    for my $node ($data->getChildNodes)
    {
        if (($node->getNodeType == ELEMENT_NODE) && ($node->hasChildNodes))
        {
            for my $child ($node->getChildNodes)
            {
                if ($child->getNodeType == TEXT_NODE)
                {
                    $admindata{$node->getNodeName} = $child->getNodeValue;
                }
            }
        }
    }

    # Get the REBOOT_CRITERIA_LIST element
    my $criteriaList = $doc->getElementsByTagName("reboot_criteria_list");
    if ($criteriaList->getLength > 0)
    {
        parseCriteriaList($criteriaList);
    }        

    # Get the PRODUCT_COMPONENT_REQUIRES_LIST element
    my $componentList = $doc->getElementsByTagName("product_component_requires_list");
    if ($componentList->getLength > 0)
    {
        parseProductComponentRequiresList($componentList);
    }

    #
    # Now that we're done with the parsed XML, we can clean up the memory
    #
    $doc->dispose;
}

#
# parseNewAdmindata:
#
#    Parse the new admindata file snippet
#
sub parseNewAdmindata
{
    # Read in the snippet of admindata, then wrap it in some xml tags
    my $xmltext = `cat $newAdmindata`;
    die "Unable to read $newAdmindata. Aborting...\n"
        if ($? != 0);

    $xmltext = "<admindata><payload>" . $xmltext . "</payload></admindata>";

    my $parser = new XML::DOM::Parser;
    my $doc = $parser->parse($xmltext);

    my $payload = $doc->getElementsByTagName("payload");
    my $data = $payload->item(0);

    for my $node ($data->getChildNodes)
    {
        if (($node->getNodeType == ELEMENT_NODE) && ($node->hasChildNodes))
        {
            for my $child ($node->getChildNodes)
            {
                if ($child->getNodeType == TEXT_NODE)
                {
                    $admindata{$node->getNodeName} = $child->getNodeValue;
                }
            }
        }
    }
    
    # If new admindata has reboot_required set to N,
    # clear existing reoboot criteria list
    if ($admindata{'reboot_required'} eq "N") 
    {
        $rebootAllBlades = "N";
        %bladeRebootCriteria = ();
        %appSgRebootCriteria = ();
        delete $admindata{'reboot_criteria_list'};
    }

    # Get the REBOOT_CRITERIA_LIST element
    my $criteriaList = $doc->getElementsByTagName("reboot_criteria_list");
    if ($criteriaList->getLength > 0)
    {
        # clear existing reboot criteria list
        $rebootAllBlades = "N";
        %bladeRebootCriteria = ();
        %appSgRebootCriteria = ();
        parseCriteriaList($criteriaList);
    }

    # Get the PRODUCT_COMPONENT_REQUIRES_LIST element
    my $componentList = $doc->getElementsByTagName("product_component_requires_list");
    if ($componentList->getLength > 0)
    {
        # clear existing product component requires list
        %pcrProductComponent = ();
        parseProductComponentRequiresList($componentList);
    }

    #
    # Now that we're done with the parsed XML, we can clean up the memory
    #
    $doc->dispose;
}

#
# generatePatchAdmindata:
#
#    Basically a clone of the function in buildpatch, with some minor diffs
#
sub generatePatchAdmindata
{
    my $fname = "$tmpdir/new.admindata";
    open ADMIN, ">$fname" or
        die "Could not write to $fname";

    my %data = %admindata;

    my $now = `date +"%Y-%m-%d %H:%M:%S"`;
    chomp $now;

    print ADMIN <<ENDOFADMINHEADER;
<admindata>
    <metaversion>1.1</metaversion>
    <payload>
        <patch_id>$data{'patch_id'}</patch_id>
        <title>$data{'title'}</title>
        <description>$data{'description'}</description>
        <created>$data{'created'}</created>
        <updated>$now</updated>
        <baseline_release>$data{'baseline_release'}</baseline_release>
        <type>$data{'type'}</type>
ENDOFADMINHEADER

    # Delete the admindata tags we've manually inserted.
    delete $data{'patch_id'};
    delete $data{'title'};
    delete $data{'description'};
    delete $data{'created'};
    delete $data{'updated'};
    delete $data{'baseline_release'};
    delete $data{'type'};

    if (defined $data{'requires'})
    {
        print ADMIN "<requires>";
        print ADMIN "$data{'requires'}";
        print ADMIN "</requires>\n";
        delete $data{'requires'};
    }

    if (defined $data{'product_component_requires_list'})
    {
        printProductComponentRequiresList(\*ADMIN, \%pcrProductComponent);
        delete $data{'product_component_requires_list'};
    }

    print ADMIN "<product_components>";
    print ADMIN "$data{'product_components'}";
    print ADMIN "</product_components>\n";
    delete $data{'product_components'};

    #
    # Add all the other tags (exclude reboot_criteria_list) that were in the input admindata
    #
    for my $k (sort keys %data)
    {
        if ($k ne "reboot_criteria_list") 
        {
            print ADMIN "        <$k>$data{$k}</$k>\n";
        }
    }

    if (defined $data{'reboot_criteria_list'})
    {
        printRebootCriteriaList(\*ADMIN, $rebootAllBlades, \%bladeRebootCriteria, \%appSgRebootCriteria);
        delete $data{'reboot_criteria_list'};
    }

    print ADMIN <<ENDADMINDATA;
    </payload>
</admindata>
ENDADMINDATA

    close ADMIN;
}


#
# MAIN
#

# Get the command-line arguments
my $rc = GetOptions(
        'patch=s'                    => \$patch,
        'admindata=s'                => \$newAdmindata,
        'status=s'                   => \$status,
        'category=s'                 => \$category,
        'output=s'                   => \$outputDir,
        'help'                       => \$help);

if (!$rc || defined($help))
{
    &showHelp;
}

#
# Validate the arguments
#
die "The patch file must be specified with --patch.\n"
    if (!$patch);

die "The specified patch file, $patch, does not exist or is not readable.\n"
    if (! -r $patch);

die "You must use one of --status/category or --admindata.\n"
    if (($newAdmindata eq "")
        and (($status eq "") and ($category eq "")));

die "The --status/category and --admindata options are mutually exclusive.\n"
    if (($newAdmindata ne "")
        and (($status ne "") or ($category ne "")));

die "$outputDir does not exist or is not writeable.\n"
    if ((! -d $outputDir) || (! -w $outputDir));

my ($pname, $ppath, $psuffix) = fileparse($patch, ".patch");
die "Patch file must end in .patch.\n"
    if ($psuffix ne ".patch");

my $outfile = "$outputDir/$pname.patch";
die "$outfile already exists. Aborting...\n"
    if (-f $outfile);

#
# Extract the patch contents to the tmpdir
#
`tar xf $patch -O $pname.wrapper | tar x --directory $tmpdir`;

die "Failed to extract contents of $patch\n"
    if ($? != 0);

parseAdmindata();

if ($newAdmindata ne "")
{
    parseNewAdmindata();
    # Now check the reboot status
    if ((scalar keys %bladeRebootCriteria > 0) or
        (scalar keys %appSgRebootCriteria > 0) or
        ($rebootAllBlades eq "Y"))
    {
        $rebootCriteriaDefined = "Y";
    }

    if (($admindata{'reboot_required'} eq "Y") and ($rebootCriteriaDefined ne "Y"))
    {
        die "Input patch XML has set REBOOT_REQUIRED to Y, but no criteria is defined";
    }
    if (($admindata{'reboot_required'} ne "Y") and ($rebootCriteriaDefined eq "Y"))
    {
        die "Input patch XML has defined reboot criteria, but REBOOT_REQUIRED is not set to Y";
    }
}
else
{
    my $changed = 0;

    if ($status and $status ne $admindata{status})
    {
        $admindata{status} = $status;
        $changed++;
    }

    if ($category and $category ne $admindata{category})
    {
        $admindata{category} = $category;
        $changed++;
    }

    if ($changed == 0)
    {
        # No reason to update the patch. Just copy the file to the output directory
        `cp $patch $outputDir`;
        die "Failed to copy patch to output directory: $outputDir\n"
            if ($? != 0);

        print "$pname is already at $admindata{status}/$admindata{category}.\n";
        print "Copied to $outputDir/$pname.patch\n";

        exit (0);
    }
}

generatePatchAdmindata();

`find $tmpdir -name '*.parcel' > $tmpdir/parcels.lst`;

my $cmddir = `dirname $0`;
chomp $cmddir;

my $cmd = "$cmddir/mergepatch -b -p $admindata{'patch_id'} -a $tmpdir/new.admindata -f $tmpdir/parcels.lst -o $outputDir";

open MERGE, "$cmd |" or die "Failed to launch mergepatch command";
print while (<MERGE>);
close MERGE;

my $rc = $?;
if ($rc != 0) 
{
    print STDERR "Call to mergepatch failed. Aborting...\n";
    exit ($rc);
}

