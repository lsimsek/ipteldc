#!/usr/bin/env perl
#
#

use warnings "all";
use strict;

#
# Globals
#
use vars qw (
    $tmpdir
);

use Getopt::Std;

# Create the tmpdir
chomp ($tmpdir = `mktemp -d -p /tmp esd2iso.XXXXXX`);
if (! -d $tmpdir)
{
    die "Unable to create working directory.\n";
}

#
# The "END" is a special sub-routine that allows us to do some special handling
# when the script exits. This is called when either exit or die are called,
# and gives us a single place where we can clean up the temporary directory.
# This is analogous to doing a "trap on exit" in bash.
#
END
{
    my $rc = $?;

    if (-d $tmpdir)
    {
        #print "Cleaning up working directory: $tmpdir.\n";
        `rm -rf $tmpdir`;
    }

    $? = $rc;
}

# Catch interrupts.
# This will result in "die" being called, which in turn will call "END" above.
use sigtrap qw(die normal-signals);

#
# showUsage:
#
# Display help message, and a list of available loadnames.
#
sub showUsage()
{
    print STDERR <<EOF;
$0

Utility for converting ESD to ISO
  Options:
    -i <esd>           - input ESD
    -o <dir>           - output dir, where to place the ISO file

EOF
    exit (1);
}

#
# Parse and validate cmdline options
#
my %opts = ();
if (!getopts('hi:o:', \%opts)  || $opts{h})
{
    showUsage();
}

if (!$opts{i})
{
    die "Specify ESD file with -i";
}

if (!$opts{o})
{
    die "Specify output file with -o";
}

my $esdfile = $opts{i};
my $esdname = `basename $esdfile`;
chomp $esdname;
$esdname =~ s/\.tgz|\.tar\.gz//;

# Change the path in the ESD
system("tar xzf $esdfile -C $tmpdir/")
    and die "Failed to extract tarball";
system("tar czf $tmpdir/esd.tgz -C $tmpdir/$esdname/DVD1 .")
    and die "Failed to create tarball";

system("mkisofs -R -l -V $esdname -o $opts{o}/$esdname.iso $tmpdir/$esdname/DVD1") and die "Failed to create ISO";


