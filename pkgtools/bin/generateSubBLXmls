#!/bin/bash 

#####################################################################
# generateSubBLXmls
# -------------------------------------------------------------------
#       Copyright Apr, 2008, NORTEL, All rights reserved.
#
# NOTE:
# -----
# DESCRIPTION: generateSubBLXmls provides a tool to generate a sub
#              set of baseline XMLs, including patch_id and associated
#              product_components
#
# EXAMPLE 1:     /path/generateSubBLXmls -i /path/patchList.txt -o /path/subXml.xml 
#   The patchList.txt is the output of getPatches4Cust1 and will have 
#   patchid componentid in each line.
#   This script is modified to not look at patches, but rely on input file
#   which has patches and component id in it (output of getPatches4Cust1.
# EXAMPLE 2:     /path/generateSubBLXmls -I /path/Patches -o /path/subXml.xml
#   In this case, -I /path/Patches is a directory where designer patches exist
#   This is useful for designers who dont have any patches in RPS, but want to 
#   create sub xml for baseline patch which uses their design patches
#
# Return codes:
#       0   - Success, command completed without error
#       >0  - Failed code
#####################################################################

set -o nounset

#####################################################################
#
# constants & variables & commands
#
#####################################################################

tool=`basename $0`

# constants

# global
declare inputOption=""
declare inputFile=""
declare prePatId=""
declare currPatId=""
declare compId=""
declare sortedFile="/tmp/sortedFile.$$"
declare inputDir=""
declare outputFile=""
declare -a errorList
declare rebootRequired="NO"
declare PATCH_TAG="patch"
declare PATCHID_TAG="patch_id"
declare COMP_TAG="product_components"

# commands
RM="/bin/rm"
MKDIR="/bin/mkdir"
TAR="/bin/tar"
CAT="/bin/cat"
BASENAME="/bin/basename"
FIND="/usr/bin/find"
GREP="/bin/grep"
SED="/bin/sed"
GZCAT="/usr/bin/gzcat"

#####################################################################
# 
# Function Name: usage
# 
# Description: Help menu
#                                                       
#####################################################################

function usage()
{
    $CAT<<EOF

Usage: $tool < -i <inputFileWithPath> | -I <inputDir> > -o <outputFile> 
Generate a sub set of baseline XMLs, include patch_id and product_components.
Example 1: $tool -i /tmp/patchListFile.txt -o /tmp/BL.xml
Example 2: $tool -I /tmp/patches -o /tmp/BL.xml

    -i <inputFileWithPath>   : indicates the input file with path
                               containing patchid and component id (output of 
                               getPatches4Cust1). This option cannot be used
                               with -I option
    -I <inputDir>            : indicates the input directory of 
                               patches.This option cannot be used with -i option
    -o <outputFile>          : mandatory - output file name

EOF
}

#####################################################################
#
# Function Name: getFileList
#
# Description: Get file list for a directory 
#                        
#####################################################################

function getFileList()
{
    local dir=$1    
    local type=$2

    $FIND "$dir/." \( -type f -o -type l \) -name "*.${type}" -print 2>/dev/null
}

#####################################################################
#
# Function Name: getParcelAdmindata
#
# Description: Get admindata of a parcel
#                        
#####################################################################
function getParcelAdmindata()
{
    local parcel=$1

    local fname=`$BASENAME $parcel`
    local box=${fname/%\.parcel/.box}

    # Extract the admindata file directly to stdout
    $TAR xzf $parcel -O $box 2>/dev/null\
            | $TAR xz -O admindata 2>/dev/null
}
#####################################################################
#
# Function Name: getAdminValue
#
# Description: Get a field value for a tag
#                        
#####################################################################
function getAdminValue()
{
    local admindata="$1"
    local tag="$2"

    echo "$admindata" \
            | $GREP -i "<$tag>.*</$tag>" \
            | $SED 's/.*>\(.*\)<.*/\1/'
}

#####################################################################
#
# Function Name: getPatchAdmindata
#
# Description: Get a admindata of patch or admindatas of parcels
#              in the patch. 
#              $1 is patch name
#              $2=1 indicates admindata of patch
#              $2=2 indicates admindatas of parcels in the patch
#                        
#####################################################################

function getPatchAdmindata()
{
    local patch=$1
    local level=$2
    local fname=`$BASENAME $patch`
    local wrapper=${fname/%\.patch/.wrapper}
    local parcels=""

    if [[ $level -eq 1 ]]
    then
        # Get admindata of patch 
        $TAR xf $patch -O $wrapper 2>/dev/null\
             | $TAR x -O admindata 2>/dev/null 
    else
        # Get admindata of parcels in the patch 
        parcels=`$TAR xf $patch -O $wrapper | $TAR -t | $GREP ".parcel"`
        for parcel in $parcels
        do
            local parcelName=`$BASENAME $parcel`
            local box=${parcelName/%\.parcel/.box}
            $TAR xf $patch -O $wrapper 2>/dev/null\
             | $TAR x -O $parcel 2>/dev/null \
             | $TAR xz -O $box 2>/dev/null \
             | $TAR xz -O admindata 2>/dev/null
        done
    fi
}

#####################################################################
#
# Function Name: getAdmindata
#
# Description: Get a admindata of a file. If the file is a parcel, 
#              get admindata for the parcel.
#              If the file is a patch, get admindata for the patch.
#                        
#####################################################################

function getAdmindata()
{
    local file=$1
    local level=$2
    local fname=`$BASENAME $file`

    ext=${fname##*.}
    if [[ "$ext" = "patch" ]]
    then
        getPatchAdmindata $file $level
    else 
        if [[ "$ext" = "parcel" ]]
        then
            getParcelAdmindata $file
        else
            echo "Wrong patch file $file"
        fi
    fi
}

##################################################################
#
# MAIN PROGRAM
#
#####################################################################

#Parse the parameters
while getopts hi:I:o:l:a: Option >/dev/null 2>&1
do
    case "${Option}" in
        i)  #source file with patch,componentid
            inputFile="${OPTARG}"
            if [[ -z $inputDir ]]
            then
              inputOption="file"
            else
              echo "ERROR: Cannot use -i option along with -I "
              usage
              exit 1
            fi
            ;;
        I)  #source dir where designer patches exist
            inputDir="${OPTARG}"
            if [[ -z $inputFile ]]
            then
              inputOption="dir"
            else
              echo "ERROR: Cannot use -I option along with -i "
              usage
              exit 1
            fi
            ;;
        o)  #dest file
            outputFile="${OPTARG}"
            ;;
        h)  #help menu
            usage
            exit 0
            ;;
        *)  
            echo "Error: Wrong parameters"
            usage
            exit 1 
            ;;
    esac
done

#####################################################################
# validation
#####################################################################

if [[ -z $inputFile ]] && [[ -z $inputDir ]]
then
    echo "Error: One of -i <inputFile> or -I <inputDir> option is mandatory"
    usage
    exit 1
fi

if [[ $inputOption = "file" ]]
then
  if [[ ! -f $inputFile ]] 
  then
    echo "Error: Input File containing patchid component id list does not exist"
    usage
    exit 1
  fi
elif [[  $inputOption = "dir" ]]
then
  if [[ ! -d $inputDir ]] 
  then
    echo "Error: $inputDir containing patches does not exist"
    usage
    exit 1
  fi
fi

if [[ -z $outputFile ]]
then
    echo "Error: output file not specified"
    usage
    exit 1
fi

if [[ -f $outputFile ]]
then
    echo "Error: output file $outputFile already exists"
    usage
    exit 1 
fi

if [[ $inputOption = "file" ]]
then
######
#1. First lets sort the input file, so patchids are grouped together
#   and lets also sort unique, so there are no 2 lines with same patchid
#   and component id
#####

cat $inputFile | sort -u > $sortedFile

openPatchTag=0
echo "Creating $outputFile, Please Wait..."
while read myline
do
  currPatId=`echo $myline | awk '{print $1}'`
  compId=`echo $myline | awk '{print $2}'`
  if [[ "$currPatId" != "$prePatId" ]]
  then
      if [[ $openPatchTag -eq 1 ]]
      then
          echo "      </$COMP_TAG>" >> $outputFile
          echo "</$PATCH_TAG>" >> $outputFile
          openPatchTag=0
      fi
      echo "<$PATCH_TAG>" >> $outputFile
      openPatchTag=1
      echo "   <$PATCHID_TAG>$currPatId</$PATCHID_TAG>" >> $outputFile
      echo "      <$COMP_TAG>" >> $outputFile
      echo "         $compId" >> $outputFile
  else
      echo "         $compId" >> $outputFile
  fi
  prePatId=$currPatId
done < $sortedFile

if [[ $openPatchTag -eq 1 ]]
then
    echo "      </$COMP_TAG>" >> $outputFile
    echo "</$PATCH_TAG>" >> $outputFile
    openPatchTag=0
fi

#cleanup
rm $sortedFile

echo "Sub xml file: $outputFile created successfully! "
exit 0
elif [[ $inputOption = "dir" ]]
then
  #####################################################################
  #get list of patches
  #####################################################################

  echo "Generating a subset of baseline XMLs"
  echo "<contents>" >> $outputFile

  # get files that are older than $cFile
  patchList=`getFileList $inputDir "patch"`

  if [[ -n patchList ]]
  then 
      for patch in $patchList
      do
          fileName=`$BASENAME $patch`
          echo "Checking for: $fileName"
          if [[ ! -r "$patch" ]]
          then
              echo "Cannot read patch: $fileName" 
              errorList[${#errorList[@]}+1]=$fileName
              continue 
          fi
  
          # get Admindata for patch
          admin=`getAdmindata $patch 1`
  
          category=`getAdminValue "$admin" category`
          # if patch 's cateogry is OBS/OBE, remove it from load
          # otherwise, copy it to load
          if [[ "$category" = "OBS" || "$category" = "OBE" ]]
          then
              echo "An Obsolete patch: $fileName"
              errorList[${#errorList[@]}+1]=$fileName
              continue
          fi
  
          softwaretype=`getAdminValue "$admin" type`
          # if patch 's type is patch_baseline, skip it
          # since it is not expected to be included in baseline
          if [[ "$softwaretype" = "patch_baseline" ]]
          then
              echo "Ignore baseline patch $fileName"
              continue
          fi
  
          localRebootRequired=`getAdminValue "$admin" reboot_required`
          # check if patch is reboot-required
          if [[ $localRebootRequired = 'Y' ]]
          then
              rebootRequired='YES'
          fi
  
          # get Admindatas for parcels in the patch
          admin=`getAdmindata $patch 2`
  
          # check if any of the product_component of the patch(parcel) 
          # exists in the load
          productCodes=`getAdminValue "$admin" product_component | sort -u`
          if [[ -z $productCodes ]]
          then
              echo "No product component code: $fileName"
              errorList[${#errorList[@]}+1]=$fileName
              continue
          fi
  
          fileNameWithoutExt="${fileName/%.patch/}"
          echo "  <patch>" >> $outputFile
          echo "  <patch_id>$fileNameWithoutExt</patch_id>" >> $outputFile
          echo "    <product_components>" >> $outputFile
          for productCode in $productCodes
          do
              echo "    $productCode" >> $outputFile
          done
  
          echo "    </product_components>" >> $outputFile
          echo "  </patch>" >> $outputFile
      done
  fi
  
  echo "</contents>" >> $outputFile
  
  # Output whether there are reboot-required patches.
  echo "-------------------"
  if [[ "$rebootRequired" = "YES" ]]
  then
      echo "Reboot IS required"
  else
      echo "NO reboot required"
  fi
  echo "-------------------"

  if [[ ${#errorList[@]} -ne 0 ]]
  then
      echo "There are errors, please look at logs above."
      exit 1
  fi
  
  echo "Successfully generated a subset of baseline xml file."
  exit 0
fi
