###############################################################
###############################################################

#     #                                                   ###
#  #  #    ##    #####   #    #     #    #    #   ####    ###
#  #  #   #  #   #    #  ##   #     #    ##   #  #    #   ###
#  #  #  #    #  #    #  # #  #     #    # #  #  #         #
#  #  #  ######  #####   #  # #     #    #  # #  #  ###
#  #  #  #    #  #   #   #   ##     #    #   ##  #    #   ###
 ## ##   #    #  #    #  #    #     #    #    #   ####    ###

###############################################################
#
# This file should only be updated by the USM team.
# http://wiki.us.nortel.com/twiki/bin/view/Siren/WhoIsUSM
#
# Modifications to this file affect EVERYBODY!
#
###############################################################
############################################################################
# wrapit
#   - wraps rpm packages using the standard meta data convention
#
# Written by: Andrew Ross May 16, 2005
#
# Updated by:
#
###############################################################################
#
# Copyright (c) 2010 GENBAND. All rights reserved.
#
# Software owned by or under license with Nortel Networks included in this
# Release is Copyright (c) 2005 Nortel Networks or its licensors.
# Use of this software and its contents is subject to the terms and conditions
# of the applicable end user or software license agreement, right to use notice,
# and all relevant copyright protections.
#
###############################################################################

# Picky is always better therefor...
use strict;

# Use this module to keep track of which directory we're in
use Cwd;

# Use this module for copying files
use File::Copy;

# Use this module for creating and removing directories
use File::Path;

# Use this module to get the extension of the file
use File::Basename;

use vars ('$pkgtoolBinDir',
          '$pkgtoolConfigDir',
          '$pkgtoolVersion'
);

# Determine the config dir
$pkgtoolBinDir = dirname($0);
if (-d "$pkgtoolBinDir/config")
{
    $pkgtoolConfigDir = "$pkgtoolBinDir/config";
}
else
{
    $pkgtoolConfigDir = "$pkgtoolBinDir/../config";
}

# Require the utility module.
require "$pkgtoolConfigDir/pkgutils.pm";

# pkgtoolVersion must be aligned with the other pkgtools
$pkgtoolVersion = "8.0.3";


#######################################################################
# Globals - Using globals & this technique for backwards compatibility
# (yes, I know globals are lame but this makes the tool more portable)
#######################################################################
use vars qw (
             $opt_a
             $opt_d
             $opt_f
             $opt_h
             $opt_m
             $opt_o
             $opt_T
             $AdmindataFile
             $AdmindataRecipeFile
             $Architecture
             $PkgTarget
             $Directory
             $FileInstance
             $FileName
             $HelpOptionSet
             $OutputDirectory
             $RPM
             $RPM_TOOLSET_VERSION
             $RPMAdminDataCodeSections
             $RPMAdminDataDescription
             $RPMAdminDataRequires
             $RPMAdminDataSoftwareId
             $RPMAdminDataTitle
             $RawAdminData
             $tmpdir
             $VSE_RELEASE
             $mappingList
             $patchLevel
             $pkgmapFile
             $nclmapFile
             $Pec
             $Role
             $Layer
             $NCL
             %AdmindataTagHash
             @FileList
             @MultipleLineTags
             @SingleLineTags
             $txtPatchFlagFile
            );

#######################################################################
# Constants
#######################################################################

$pkgmapFile = $ENV{USE_PKGMAPFILE};
die "Unable to read package mapping file. Ensure USE_PKGMAPFILE is set.\n"
    if ((!$pkgmapFile) or (! -r $pkgmapFile));

$txtPatchFlagFile = `dirname $ENV{'USE_PKGMAPFILE'}`;
chomp($txtPatchFlagFile);
$txtPatchFlagFile .= "/txt_patch_build";

$nclmapFile = $ENV{USE_NCLMAPFILE};


# Create tmpdir
chomp ($tmpdir = `mktemp -d -p /tmp wrapit.XXXXXX`);
if (! -d $tmpdir)
{
    die "Unable to create working directory.\n";
}

$AdmindataFile = "$tmpdir/admindata";

# Default output to current directory. This will be overridden during
# argument processing, if specified.
$OutputDirectory = getcwd();

#
# The "END" is a special sub-routine that allows us to do some special handling
# when the script exits. This is called when either exit or die are called,
# and gives us a single place where we can clean up the temporary directory.
# This is analogous to doing a "trap on exit" in bash.
#
END
{
    my $rc = $?;

    if (-d $tmpdir)
    {
        #print "Cleaning up working directory: $tmpdir.\n";
        `rm -rf $tmpdir`;
    }

    $? = $rc;
}

# Catch interrupts.
# This will result in "die" being called, which in turn will call "END" above.
use sigtrap qw(die normal-signals);


# Where do we get RPM? For licensing, we'll need to have an alternative
# access method. For now, if ivt doesn't exist, we'll use the host tools.
if (-f "/opt/tools/bin/ivt")
{
    $RPM_TOOLSET_VERSION="4.4.2_wrs";
    chomp($RPM = `/opt/tools/bin/ivt rpm $RPM_TOOLSET_VERSION which rpm`);
}
else
{
    chomp($RPM = `which rpm`);
}

# Release information, if available
if ((defined $ENV{VSE_RELEASE}) || (defined $ENV{ntmkbw_VSE_RELEASE}))
{
  $VSE_RELEASE = defined $ENV{VSE_RELEASE} ? $ENV{VSE_RELEASE}
                                           : $ENV{ntmkbw_VSE_RELEASE};
}

# Get options
use Getopt::Std;
getopts("a:d:f:o:m:T:h");
$Architecture = $opt_a;
$AdmindataRecipeFile = $opt_m;
$Directory = $opt_d;
$FileName = $opt_f;
$HelpOptionSet = $opt_h;
$OutputDirectory = $opt_o;

if (!$opt_T or $opt_T eq "fam")
{
    $PkgTarget = "*";
}
else
{
    $PkgTarget = $opt_T;
}


our $HelpText=<<EOF;

wrapit (version $pkgtoolVersion)

Description:
~~~~~~~~~~~~

  wrapit provides an interface for wrapping RPM packages into parcels
    - validates that some of the data is proper
    - wraps with the standard Nortel XML meta data

  wrapit also allows an existing parcel to be re-wrapped (in order to update
  the XML meta data within the parcel)

Usage:
~~~~~~

  wrapit <options> <parameters>

  Options:
  ~~~~~~~~
    -h                         print this help text

  Basic Options:
  ~~~~~~~~~~~~~~
    -a <architecture> the architecture the software will run on
    -m <meta data file> the file specifying the meta data values to use
    -o <output directory> where to place the parcel when completed
    -f <file>        the file to wrap
    -d <directory> the directory to search for rpm packages

EOF

#######################################################################
# <<Here come the Functions>>
#######################################################################



#############################################################
# parse_admindata()
# -  reads the patch recipe file data into memory storing it
#   in a hash
#
#############################################################
sub parse_admindata($;$)
{
    my $TempAdminFile  = shift;
    my $allowOverrides = shift;

    if (-r $TempAdminFile)
    {
        my $TempRawAdminData = `cat $TempAdminFile`;

        # The tags to look for in the definition file

        # These tags CANNOT have a newline in them
        @SingleLineTags = (
                           'activation_required',
                           'apply_handling',
                           'auto_apply',
                           'baseline_release',
                           'category',
                           'class',
                           'created',
                           'creation_date',
                           'encryption',
                           'hardware_platform',
                           'last_vscan_date',
                           'operating_system',
                           'payload_checksum',
                           'payload_filename',
                           'payload_size',
                           'portal_id',
                           'product_component',
                           'product_component_version',
                           'reboot_required',
                           'removal_options',
                           'status',
                           'title',
                           'type',
                           'version',
                           'vo_prime',
                           'vo_site',
                           'vscan_definitions',
                           'web_post',
                           'applies_to'
                          );

        # These tags CAN have a newline in them
        @MultipleLineTags = (
                             'codesections',
                             'cr',
                             'cr_title',
                             'description',
                             'design_updates',
                             'incompatible_with',
                             'install_instructions',
                             'patch_updates',
                             'requires',
                             'signature_certificate',
                             'software_package',
                             'supercedes',
                             'test_instructions',
                             'warning'
                            );

        # NOTE: The pkg_name, pkg_summary and pkg_description tags are not
        # normally parsed from the admindata. These tags do not map directly
        # to fields in the metadata. Instead, pkgtool stores them in the RPM
        # as the name, title and summary. They are then read into the
        # <software_id>, <title> and <description> tags (see the examine_rpm
        # function).
        # Of course, there is an exception. If we have been told to override
        # the RPM metadata, then we will look for the pkg_summary and
        # pkg_description tags and use them if they are there. We do not
        # look for the pkg_name, because we would never want the software_id
        # in the parcel to differ from the name of the RPM.
        if ($allowOverrides eq "allowOverrides")
        {
            push (@SingleLineTags, 'pkg_summary');
            push (@MultipleLineTags, 'pkg_description');
        }

        # Load the single line tags
        foreach my $Tag (@SingleLineTags)
        {
            my $StartTag = "<$Tag>";
            my $EndTag  = "</$Tag>";

            if ($TempRawAdminData =~ m/$StartTag(.*?)$EndTag/)
            {
                # Please note: $1 is the output from the pattern match
                # in the if statement
                $AdmindataTagHash{$Tag} = $1;
            }
        }

        # Load the multiple line tags
        foreach my $Tag (@MultipleLineTags)
        {
            my $StartTag = "<$Tag>";
            my $EndTag  = "</$Tag>";

            if ($TempRawAdminData =~ m/$StartTag(.*?)$EndTag/s)
            {
                # Please note: $1 is the output from the pattern match
                # in the if statement
                $AdmindataTagHash{$Tag} = $1;
            }
        }

        if ($allowOverrides eq "allowOverrides")
        {
            # We're overriding with a specified admindata file, so
            # update the "updated" tag.
            my $Now = `date +"%Y-%m-%d %H:%M:%S"`;
            chomp ($Now);
            $AdmindataTagHash{"updated"} = $Now;

            if (defined $AdmindataTagHash{'requires'})
            {
                $AdmindataTagHash{'requires'} =~ s/^\s*//;

                # In the case where wrapit has been called on a previously
                # built parcel and an override admindata file has been
                # specified, we'll append any "requires" tag to the list
                # queried from the rpm itself.
                # We need to make sure, though, that we're not duplicating
                # existing dependencies.
                my @newReqs = split /\n/, $AdmindataTagHash{'requires'};
                my $appendList = "";

                for my $req (@newReqs)
                {
                    next if ($req eq "");

                    # If the "requires" from the admindata file has any macros
                    # in it (e.g. ${current_arch}) we will ignore them. The
                    # macro substitution would already have been done by
                    # pkgtool and we can't do macro substitution here in
                    # wrapit.
                    if ($req =~ /\$/)
                    {
                        print "Warning: Ignoring <requires> $req because it contains a macro.\n";
                        next;
                    }

                    # Use quotemeta to escape any meta-characters that
                    # would affect the pattern matching
                    my $qreq = quotemeta $req;

                    # In the regex below, we're searching for lines in
                    # $RPMAdminDataRequires that match the new dependencies.
                    # So in the expression "m/^$qreq\s*$/m", the first "m" is
                    # the "match" operator, and the last "m" indicates
                    # that $RPMAdminDataRequires is to be treated as
                    # multiple lines. In effect, this iterates through the
                    # individual dependencies in $RPMAdminDataRequires to
                    # see if any are an exact match for $qreq.
                    if (!($RPMAdminDataRequires =~ m/^$qreq\s*$/m))
                    {
                        $appendList .= "$req\n";
                    }
                }

                if ($appendList ne "")
                {
                    print "Warning: Appending the <requires> tag.\n";
                    $RPMAdminDataRequires =~ s#</requires>#$appendList</requires>\n#;
                }
            }
            if (defined $AdmindataTagHash{'title'})
            {
                $RPMAdminDataTitle = "\t\t<title>" . $AdmindataTagHash{'title'} . "</title>\n";
            }
            elsif (defined $AdmindataTagHash{'pkg_summary'})
            {
                $RPMAdminDataTitle = "\t\t<title>" . $AdmindataTagHash{'pkg_summary'} . "</title>\n";
            }

            # If we're allowing override, and <description> isn't in the
            # admindata, then allow override with pkg_description
            if (defined $AdmindataTagHash{'description'})
            {
                $RPMAdminDataDescription = "\t<description>" . $AdmindataTagHash{'description'} . "</description>\n";
            }
            elsif (defined $AdmindataTagHash{'pkg_description'})
            {
                $RPMAdminDataDescription = "\t<description>" . $AdmindataTagHash{'pkg_description'} . "</description>\n";
            }
        }

        # The following tags are no longer required and can be deleted.
        delete $AdmindataTagHash{'requires'};
        delete $AdmindataTagHash{'title'};
        delete $AdmindataTagHash{'description'};
        delete $AdmindataTagHash{'pkg_summary'};
        delete $AdmindataTagHash{'pkg_description'};

        print "Admindata information loaded successfully.\n";
    }
    else
    {
        print "\n$AdmindataRecipeFile can not be read.\n";
        print "Can not continue. Exiting\n";
        exit 1;
    }

}


#############################################################
# examine_rpm()
#############################################################
sub examine_rpm($)
{
    my $fileArch = shift;

    my $Now = `date +"%Y-%m-%d %H:%M:%S"`;
    chomp ($Now);
    # For now put the timestamp in the created field
    $AdmindataTagHash{"created"} = $Now;
    $AdmindataTagHash{"updated"} = $Now;
    $AdmindataTagHash{"hardware_platform"} = $fileArch;

    # Query all the info we need from the rpm file in one call, and split the data after
    my $separator = "::separator::";
    my $rpmData = `$RPM -qp --queryformat "%{version}$separator%{name}-%{version}-%{release}.%{arch}$separator%{summary}$separator%{description}$separator" --requires $FileInstance  | sed "s/&/and/g"`;
    if ($? != 0) 
    {
        print "Error: Failed to get required info for $FileInstance\n";
        exit -1;
    }

    my ($Version, $SoftwareId, $Title, $Description, $Requires) = split /$separator/, $rpmData;

    $AdmindataTagHash{"version"} = $Version;

    # since we have the version, grab the patch level, which will be the last
    # number in the version
    if ($AdmindataTagHash{"version"} =~ m/(\d+)$/)
    {
        $patchLevel = $1;
    }

    # Store the rpm query output
    $RPMAdminDataSoftwareId  = "\t<software_id>$SoftwareId</software_id>\n";
    $RPMAdminDataTitle       = "\t\t<title>$Title</title>\n";
    $RPMAdminDataDescription = "\t<description>$Description</description>\n";

    # Grab the requires (dependency) information and add it to the admindata.
    # Filter out:
    # - absolute paths
    # - rpmlib rules, such as "rpmlib(VersionedDependencies) <= 3.0.3-1"
    # - shared libraries
    #
    $Requires =~ s/^\/.*$|^rpmlib\(.*$|^.*\.so\b.*$//mg;
    $Requires =~ s/\n+/\n/g; # Remove blank lines
    $Requires =~ s/^\n//g;   # Remove blank line from the beginning

    # VSE 1.1 - we introduced greater-than-or-equal-to dependencies
    #   to allow patch-current DVDs.  RPM will only install the newest
    #   version of an RPM, so if an earlier version has a dependency
    #   against it, it must apply to the newer rpm via the greater-than
    #   USM, however, can't handle that for 1.1 so we have to hack
    #   this together.  Put the greater-than dependency in the rpm,
    #   but keep the regular dependency in the admindata file of the
    #   parcel.  This means that a patch-current DVD MUST have all   
    #   patchs present, even if it means 2 versions of some parcels
    #   will exist.
    #
    # In the RPM we have:
    #   usm_base_i686_typhoon_CNP >= 1.1.0.064706.0-1
    # which will become in the admindata:
    #   usm_base_i686_typhoon_CNP-1.1.0.064706.0-1.i386
    #
    # Substitute " >= " followed by "everything but whitespaces until the end of line"
    #   with "-" followed by the "everything but whitespaces until the end of line"
    #   followed by ".i386"
    # treating the input as multiline buffer, and for all lines in buffer
    $Requires =~ s/ >= ([^\s]*)$/-$1.i386/mg;
    
    $RPMAdminDataRequires = "<requires>\n" . $Requires. "</requires>\n";

    if (defined $ENV{'USE_BINTAP'})
    {
        $RPMAdminDataCodeSections = `$RPM -qlp $FileInstance`;
    }

    my @FileNameParts = split("/", $FileInstance);
    my $PayLoadFileName = pop(@FileNameParts);
    $AdmindataTagHash{"payload_filename"} = $PayLoadFileName;
}


#############################################################
# set_default_tags()
# - check if the required tags have values, and set if needed
# 
#############################################################
sub set_default_tags()
{
    if ($AdmindataTagHash{"status"} eq "")
    {
        $AdmindataTagHash{"status"} = "S";
    }

    if ($AdmindataTagHash{"product_component"} eq "")
    {
        $AdmindataTagHash{"product_component"} = "Unknown";
    }

    if ($AdmindataTagHash{"category"} eq "")
    {
        $AdmindataTagHash{"category"} = "GEN";
    }

    if ($AdmindataTagHash{"type"} eq "")
    {
        $AdmindataTagHash{"type"} = "rpm_package";
    }

    if ($AdmindataTagHash{"class"} eq "")
    {
        # As default:
        # Patches are considered corrective
        # Install are considered features
        # - Note: you can override this of course
        if ($patchLevel == 0)
        {
            $AdmindataTagHash{"class"} = "FEATURE";
        }
        else
        {
            $AdmindataTagHash{"class"} = "CORRECTIVE";
        }
    }


    if ($AdmindataTagHash{"operating_system"} eq "")
    {
        $AdmindataTagHash{"operating_system"} = "Linux";
    }

    if ($AdmindataTagHash{"activation_required"} eq "")
    {
        $AdmindataTagHash{"activation_required"} = "N";
    }

    if ($AdmindataTagHash{"encryption"} eq "")
    {
        $AdmindataTagHash{"encryption"} = "Non-Encrypted";
    }

    if ($AdmindataTagHash{"web_post"} eq "")
    {
        $AdmindataTagHash{"web_post"} = "Y";
    }

    if ($AdmindataTagHash{"reboot_required"} eq "")
    {
        $AdmindataTagHash{"reboot_required"} = "N";
    }

    if ($AdmindataTagHash{"class"} eq "")
    {
        $AdmindataTagHash{"class"} = "I";
    }

    if ($AdmindataTagHash{"apply_handling"} eq "")
    {
        $AdmindataTagHash{"apply_handling"} = "active";
    }

    if ($AdmindataTagHash{"baseline_release"} eq "")
    {
        $AdmindataTagHash{"baseline_release"}=$VSE_RELEASE;
    }
}


#############################################################
# write_admindata()
# Write admindata file.
#############################################################
sub write_admindata()
{
    print "Writing admindata file\n";
    open (ADMINDATA,"> $AdmindataFile");
    print ADMINDATA "<admindata>\n";
    print ADMINDATA "  <metaversion>1.1</metaversion>\n";
    print ADMINDATA "    <payload>\n";
    print ADMINDATA $RPMAdminDataSoftwareId;
    print ADMINDATA $RPMAdminDataTitle;
    print ADMINDATA $RPMAdminDataDescription;
    print ADMINDATA $RPMAdminDataRequires;

    foreach my $Tag (sort keys %AdmindataTagHash)
    {
        my $StartTag = "<$Tag>";
        my $EndTag = "</$Tag>";
        print ADMINDATA  "      " . $StartTag . $AdmindataTagHash{$Tag} . $EndTag . "\n";
    }

    print ADMINDATA "    </payload>\n";
    print ADMINDATA "</admindata>\n";
    close (ADMINDATA);

    print "Completed admindata file\n";
}


#############################################################
# create_parcel_file()
#############################################################
sub create_parcel_file
{

    my $JustFileName  = shift;
    my $FilePathParts = shift;

    print "Wrapping $JustFileName ...\n";
    my $BoxFileName = $FilePathParts . ".box";
    my $BoxCksumFileName = $FilePathParts . ".box.cksum";
    my $SignatureFileName = $FilePathParts . ".sig";
    my $cksumFileName = $JustFileName . ".cksum";
    my $ParcelFileName = $FilePathParts . ".parcel";

    system("cd $tmpdir && cksum $JustFileName > $cksumFileName");
    check_return_code("Creating the checksum for: $JustFileName");

    system ("cd $tmpdir && tar cvzf $BoxFileName admindata $JustFileName $cksumFileName");
    check_return_code("Creating the box file: $BoxFileName");

    # here's where we would be signing the software
    system ("cd $tmpdir && touch $SignatureFileName");
    check_return_code("creating the signature: $SignatureFileName");

    system ("cd $tmpdir && touch certificate");
    check_return_code("creating the certificate");

    system ("cd $tmpdir && cksum $BoxFileName > $BoxCksumFileName");
    check_return_code("creating the checksum for the box file: $BoxCksumFileName");

    system ("cd $tmpdir && tar cvzf $ParcelFileName $BoxFileName $BoxCksumFileName $SignatureFileName certificate");
    check_return_code("archiving the parcel: $ParcelFileName");


    my $ToFile = $OutputDirectory . "/" . $ParcelFileName;
    my $FromFile = $tmpdir . "/" . $ParcelFileName;
    copy($FromFile, $ToFile);

    print "Completed wrapping $JustFileName.\nOutput to: $ToFile\n";
}




#############################################################
# check_return_code()
#############################################################
sub check_return_code
{
    my $rc = $?;
    my $Message = shift;

    if ($rc != 0)
    {
        print "The operation failed. Message: $Message\n";
        exit 1;
    }
}


#############################################################
# validate_version_format()
#############################################################
sub validate_version_format
{
    my $filename = shift;

    # Perform version format validation
    if (!( $filename =~ m/-\d+\.\d+\.\d+\.[a-zA-Z0-9]+\.\d+-[^-]*$/))
    {
        print <<END;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Warning: Package version format must align with the standard VSE format:
           <major>.<minor>.<mr>.<build version>.<patch level>
         where all fields are numeric, except <build version> which is
         alphanumeric.
         Example: 3.0.0.ab0804.0

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Cannot continue: exiting.

END
        exit 1;
    }
}


#############################################################
# processFilename()
#############################################################
sub processFilename($)
{
    my $filename = shift;

    # If this is a BINTAP parcel (which is part of a BINTAP patch)
    # then the name has had a _TAP_<tap_version> inserted just before
    # the DRU.  
    # So, here we parse the filename to consider match both cases.
    if ($filename =~ /^.*\/(.*)_$Architecture(.*)(_TAP_[0-9]+)?-([^-]*)-([^-]*)\.rpm$/)
    {
        my $basepkg = $1;
        my $suffix = $2;
        my $version = $3;
        my $extension = $4;
 
        #Strip off any bintap extension.
        if ($suffix =~ s/_TAP_[0-9]+$//)
        {
            print "Removed _TAP_ extension\n";
        }

        my $pkgname = $basepkg . "_" . $Architecture . $suffix;

        my %pkgmap;

        my $selectedNcl;

        if (parsePkgMapping($Architecture, $pkgmapFile, \%pkgmap) != 0)
        {
            die "Failed to parse $pkgmapFile";
        }

        $Role = undef;
        $Pec = undef;
        $Layer = undef;

        # We need to find the matching entry
        pkgmapLoop: for my $layer (keys %{$pkgmap{$basepkg}})
        {
            # Set a shortcut for the nested hash
            my $hashref = \%{$pkgmap{$basepkg}{$layer}{$Architecture}{$PkgTarget}};
            for my $role (keys %$hashref)
            {
                for my $pec (keys %{$$hashref{$role}})
                {
                    # Now check to see if the name matches. If so, we've got
                    # the right rule.
                    if ($$hashref{$role}{$pec}{'NAME'} eq $pkgname)
                    {
                        $Layer = $layer;
                        $Role = $role;
                        $Pec = $pec;
                        last pkgmapLoop;
                    }
                }
            }
        }

        if (!defined $Role)
        {
            print "*** Failed to find $basepkg for $Architecture in $pkgmapFile\n";
            $NCL = "Unknown";
            $Role = "";
            $Pec = "";
            return;
        }

        if ($nclmapFile ne "")
        {
            # Process the NCL map file to select the correct NCL
            my %nclmap;

            if (parseNclMapping($nclmapFile, \%nclmap) != 0)
            {
                die "Could not parse $nclmapFile";
            }

            $selectedNcl = selectNcl(\%pkgmap,
                                     \%nclmap,
                                     $basepkg,
                                     $Layer,
                                     $Architecture,
                                     $PkgTarget,
                                     $Role,
                                     $Pec);
        }
        else
        {
            $selectedNcl = selectNcl(\%pkgmap,
                                     undef,
                                     $basepkg,
                                     $Layer,
                                     $Architecture,
                                     $PkgTarget,
                                     $Role,
                                     $Pec);
        }

        if (!defined $selectedNcl)
        {
            die "Unable to select NCL";
        }

        $NCL = $selectedNcl;
    }
    else
    {
        die "Unable to process filename: $filename";
    }

    if ($NCL eq "")
    {
        # We should never get here, since we'd have aborted by now
        die "Unable to determine correct NCL";
    }

    $AdmindataTagHash{"product_component"} = $NCL;

    if ($Pec ne "")
    {
        $AdmindataTagHash{"PEC"} = $Pec;
    }
}



#######################################################################
# Main
#######################################################################

# If we're asked for help, display the help and exit right away
if ($HelpOptionSet)
{
    print $HelpText;
    exit 1;
}

print "\nUsing wrapit $pkgtoolVersion\n\n";

if (!$Architecture)
{
    print "Warning!: Architecture is a required parameter.\n";
    print "Cannot continue: exiting.\n";
    exit 1;
}

if ($AdmindataRecipeFile)
{
    if (!-f $AdmindataRecipeFile)
    {
        print "\nError!: -m meta data file: $AdmindataRecipeFile not found.\n";
        print "Cannot continue: exiting.\n";
        exit 1;
    }

    if ((!-f $FileName) && (!-d $Directory))
    {
        print "\nError!: The -m option must be followed by the -f or -d option.\n";
        print $HelpText;
        exit 1;
    }
}

if (!-d $OutputDirectory)
{
    if (!mkpath($OutputDirectory))
    {
        die "Could not create the output directory: $OutputDirectory\n";
    }
}

# If we've been told a file to examine, push it onto the list
if (-f $FileName)
{
    push (@FileList,$FileName);
}

# If we've been told to check a  directory that exists, push the files
# in it onto our list
if (-d $Directory)
{
    my $DirectoryEntry;

    opendir(DIR, $Directory);
    while (defined($DirectoryEntry = readdir (DIR)))
    {
        chomp ($DirectoryEntry);
        if ($DirectoryEntry =~ /\.rpm$/)
        {
            my $TargetFile = $Directory . "/" . $DirectoryEntry;
            push (@FileList,$TargetFile);
        }
    }
    closedir DIR;
}


# Now, go through the list and wrap 'em
foreach $FileInstance (@FileList)
{
    %AdmindataTagHash = ();

    my @FileParts = split("/",$FileInstance);
    my $JustFileName = pop(@FileParts);


    # Check the extension if it is an RPM, wrap it
    # anything else, just ignore it
    my @FilePathParts = fileparse($FileInstance, qr/\.[^.]*/);

    # Check the extension to figure out what to do
    if (@FilePathParts[2] eq ".rpm")
    {
        # Perform version format validation
        validate_version_format($FileInstance);

        # Kluge for NGW-bbs.....ARCH is set to "arm" and is needed for the SDK 
        # build environment provided by Intel.  This change will, for the purposes
        # of packaging, alter the  local copy of this to xscale_be, the intended
        # architecture for the packaging environment for the xscale_be NGW.
        if ($Architecture eq "arm")
        {
            print "wrapit - changing Architecture from arm to xscale_be\n";
            $Architecture = "xscale_be";
        }

        processFilename($FileInstance);

        examine_rpm($Architecture);
        if (-e "$txtPatchFlagFile") {
          $AdmindataTagHash{"type"} = "txt_package";
          print ("real_wrapit: AdmindataTagHash{type} set to txt_package");
        }
        set_default_tags();

        # Update the meta data from the patch recipe file
        if (-f $AdmindataRecipeFile)
        {
            parse_admindata($AdmindataRecipeFile);
        }

        if ($AdmindataTagHash{"applies_to"} && $AdmindataTagHash{'payload_filename'})
        {
            # Make sure the pkg version matches the applies_to field
            # Is this too paranoid?
            if ($AdmindataTagHash{"applies_to"} == $AdmindataTagHash{"version"})
            {
                my $finalname =  $AdmindataTagHash{'payload_filename'};
                #Strip off any bintap extension.
                $finalname =~ s/_TAP_[0-9]+//;
                $finalname    =~ s/\.rpm//g;
                $AdmindataTagHash{"applies_to"} = $finalname;
            }
            else
            {
                die "Applies to field in admindata does not match the parcel: \n" .
                    "applies_to: $AdmindataTagHash{'applies_to'}, parcel version: $AdmindataTagHash{'version'}\n";
            }
        }

        if (exists $AdmindataTagHash{'codesections'})
        {
            my @code_sections = split "\n", $RPMAdminDataCodeSections;
            if (scalar @code_sections == 0 )
            {
                die "Rpm does not contain any code sections.\n";
            }
            for my $cs (@code_sections)
            {
                # Since the full installation path is derived when building
                # the package, only the code section name is passed to us 
                # in the $AdmindataRecipeFile (definition.pkg) file
                # Thus, replacing the code section name with the full path.
                my $csname = basename($cs);
                $AdmindataTagHash{'codesections'} =~ s/$csname/$cs/;
            }
        }

        write_admindata();
        if (!copy($FileInstance,$tmpdir))
        {
            die("Could not copy $FileInstance to $tmpdir\n");
        }

        create_parcel_file($JustFileName, @FilePathParts[0]);
    }
}

exit 0

